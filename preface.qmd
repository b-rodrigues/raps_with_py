# Preface {.unnumbered}

I don't like Python. Or rather, don't like using it to analyze data. I believe
that certain design choices were made that make Python a subpar language for
analyzing data. That being said, Python is currently the most popular general
purpose programming language, and also the most popular language to analyze
data, especially in machine learning and AI. As such, it is a good idea to at
least know your way around it even if, like me, you prefer using the R
programming language to analyze data.

I state that I don't like Python because I want to make something very clear,
right from the start. I am not an expert in Python. I know enough to get things
done, but it is not a language that I know well. I consider myself an expert in
R, but definitely not in Python. So why write a book on Python in that case?
Well, in truth, this is not a book about Python.

This book is about building reproducible pipelines. And in order to build
reproducible pipelines, you need to apply certain general ideas. This book will
discuss these ideas, and illustrate them using the Python programming language.
Acutally, I wrote this book already: you can read it
[here](www.raps-with-r.dev). The book was well received: lots of people
contacted me to thank me for having written it, I was invited to give talks
several times on the book already, animate some workshops and some people are
already asking me for a second edition.


So this is what I decided to teach the students: how they could structure their
projects in such a way that they could spot problems like that during
development, but also make it easy to reproduce and retrace who did what and
when. I wrote my course notes into a [freely available
bookdown](https://rap4mads.eu/) that I used for teaching. When I started
compiling my notes, I discovered the concept *Reproducible Analytical Pipelines*
as developed by the [Office for National
Statistics](https://analysisfunction.civilservice.gov.uk/support/reproducible-analytical-pipelines/)
(henceforth ONS). I found the name "Reproducible Analytical Pipeline"
(henceforth RAP) really perfect for what I was aiming at. The ONS team
responsible for evangelising RAPs also published a free
[ebook](https://ukgovdatascience.github.io/rap_companion/) in 2019 already.
Another big source of inspiration is [Software
Carpentry](https://software-carpentry.org/) to which I was exposed during my PhD
years, around 2014-ish if memory serves. While working on a project with some
German colleagues from the University of Bonn, the principal investigator made
us work using these concepts to manage the project. I was really impressed by
it, and these ideas and techniques stayed with me since then.

The bottom line is: the ideas I’m presenting here are nothing new. It’s just
that I took some time to compile them and make them accessible and interesting
(at least I hope so) for users of the R programming language.

At least my students found the course interesting. But not just students. I
tweeted about this course and shared the notes with a wider audience, and this
is when I got very positive feedback from people that were not my students.
People wanted to buy this as a book and go deeper into the topics laid out. This
is when I realised that, as far as I know, there is not a practical book
available discussing these topics. So I decided to write one, but I took my time
getting started. What finally, really, got me working on it was when [Dmytro
Perepolkin](https://github.com/dmi3kno/) reached out to me and suggested I
contact several persons to get their inputs and ideas and get started. I
followed his advice, and this led to very fruitful discussions with [Sébastien
Rochette](https://github.com/statnmap), [Miles
McBain](https://github.com/MilesMcBain) and Dmytro. Their ideas and inputs
definitely improved the quality of this book, so many thanks to them. Also
thanks to [David Solito](https://twitter.com/dsolito), [Matan
Hakim](https://github.com/matanhakim), [Stas
Kolenikov](https://github.com/skolenik), [Sam
Parmar](https://github.com/parmsam), [Chuck](https://github.com/chorgan182), 
[Matouš Eibich](https://github.com/MatousEibich), [Jonathan
Moore](https://github.com/jonathandmoore), [Alain
Vagner](https://github.com/AlainVagner) and [Matthias Meiksner](https://github.com/IZE85) 
for proofreading the book and providing valuable feedback and fixes. And thank you, 
dear reader, for picking this up!

This book is divided into two parts. The first part teaches you what I believe
is essential knowledge you should possess in order to write truly reproducible
pipelines. This essential knowledge is constituted of:

- Version control with Git and how to manage projects with Github;
- Functional programming;
- Literate programming.

The main idea from part 1 is "don’t repeat yourself". Git and Github will help
us avoid losing code, and losing track of who should do what in a project (even
if you’re working alone on a project, you will see that using Git and Github
will save you many hours and headaches). Getting familiar with functional and
literate programming should improve the quality of our code by avoiding two
common sources of mistakes: computing results that rely on the state of our
program (and later, the state of the whole hardware we are using) and copy and
paste mistakes.

The second part of the book will then build upon this knowledge to introduce
several tools that will help us go beyond the benefits of version control and
functional and literate programming:

- Dependency management with `{renv}`;
- Package development with `{fusen}`;
- Unit and assertive testing;
- Build automation with `{targets}`;
- Reproducible environments with Docker;
- Continuous integration and delivery.

While this is not a book for beginners (you really should be familiar with R
before reading this), I will not assume that you have any knowledge of the tools
presented in part 2. In fact, even if you’re already familiar with Git, Github,
functional programming and literate programming, I think that you will still
learn something useful from reading part 1. But be warned, this book will
require you to take the time to read it, and then type on your computer. Type *a
lot*.

I hope that you will enjoy reading this book and applying the ideas in your
day-to-day, ideas which hopefully should improve the reliability, traceability
and reproducibility of your code. You can read this book for free on
[https://raps-with-r.dev/](https://raps-with-r.dev/), or if you want you can buy
a DRM-free PDF or Epub over at
[https://leanpub.com/raps-with-r](https://leanpub.com/raps-with-r). 

::: {.content-hidden when-format="pdf"}
You can also buy a physical copy of the book on [Amazon](https://www.amazon.com/dp/B0C87H6MGF/).
:::

If you want to get to know me better, read my
[bio](https://www.brodrigues.co/about/me/)^[https://www.brodrigues.co/about/me/].

If you have feedback, drop me an email at bruno [at] brodrigues [dot] co.

Enjoy!
